micro_NKH2 <- round(NKH2$Realvkst[1:86, ])
micro1$realvkst <- round(NKH2$Realvkst[1:86, ])
micro1$realvkst <- round(NKH2$Realvkst[1:86])
micro1$realvkst <- round(NKH2$Realvkst[1:86])
micro$realvkst <- round(NKH2$Realvkst[1:86])
micro$realvkst <- round(NKH2$Realvkst[1:86], digits = 2)
library(ggplot2)
ggplot(data = micro, aes(x = date, y = micro1)) +
geom_line() +
geom_col(data = micro, aes(x = date, y = realvkst, fill="Realvekst"))+
scale_fill_manual(values = c("Realvekst" = "blue")) +
labs(title = "Microindikator vs. Realvekst",
x = "Dato",
y = "Microindikator") +
theme_minimal()
library(ggplot2)
ggplot(data = micro, aes(x = date, y = micro1)) +
geom_line() +
geom_col(data = micro, aes(x = date, y = realvkst, fill="Realvækst"))+
scale_fill_manual(values = c("Realvækst" = "blue")) +
labs(title = "Microindikator vs. Realvækst",
x = "Dato",
y = "Microindikator") +
theme_minimal()
# lm regression
modelmicro <- lm(x = realvkst ~ micro, data = micro)
# lm regression
modelmicro <- lm(x = realvkst~micro, data = micro)
# lm regression
modelmicro <- lm(realvkst~micro,data=micro)
# lm regression
modelmicro <- lm(realvkst~micro1,data=micro)
View(modelmicro)
summary(modelmicro)
r_squared <- summary(modelmicro)$r.squared
print(r_squared)
#
micro$micro1$CCIM <- rowMeans(micro[, c(2, 3, 6, 9)])
#
micro$micro1$CCIM <- rowMeans(micro[,c(2, 3, 6, 9)])
#
micro$CCIM <- rowMeans(micro[, c(2, 3, 6, 9)])
micro§CCIM <- round(micro§CCIM, digits = 2)
micro§CCIM <- round(micro§CCIM, digits = 2)
micro$CCIM <- round(micro$CCIM, digits = 2)
library(ggplot2)
ggplot(data = micro, aes(x = date, y = CCIM)) +
geom_line() +
geom_col(data = micro, aes(x = date, y = realvkst, fill="Realvækst"))+
scale_fill_manual(values = c("Realvækst" = "blue")) +
labs(title = "CCI microindikator vs. Realvækst",
x = "Dato",
y = "CCI microindikator") +
theme_minimal()
modelCCI <- lm(realvkst~CCIM,data=micro)
View(modelCCI)
summary(modelCCI)
r_squaredCCI <- summary(modelCCI)$r.squared
print(r_squaredCCI)
print(r_squaredCCI)
combn(FTI[1,2:ncol(FTI)], 1)
View(FTI)
View(FTI)
combn(FTI[2,2:ncol(FTI)], 1)
combn(FTI[1,3:ncol(FTI)], 1)
combn(FTI[1,2:ncol(FTI)], 2)
#Baums måde at gøre det på
a <- matrix(1:24, nrow = 2, ncol = 12)
combn(a[1,1:ncol(a], 1)
combn(a[1,1:ncol(a)], 1)
View(a)
View(a)
combn(FTI[1,5:ncol(FTI)], 1)
combn(FTI[1,5,2:ncol(FTI)], 5)
combn(FTI[1,5:ncol(FTI)], 1)
combn(FTI[1:5,2:ncol(FTI)], 5)
combn(a[1,5:ncol(a)], 1)
combn(FTI[1:5:ncol(FTI)], 1)
combn(FTI[1:5,2:ncol(FTI)], 1)
combn(FTI[1:5,2:ncol(FTI)], 5)
#Baums måde at gøre det på
a <- matrix(1:60, nrow = 2, ncol = 12)
#Baums måde at gøre det på
a <- matrix(1:60, nrow = 5, ncol = 12)
a_comb1 <- combn(a[1:5,1:ncol(a)], 1)
a_comb1
combn(a[1,1:ncol(a)], 1)
a_comb1 <- combn(a[1:5,1:ncol(a)], 1)
a_comb1
#Tag udsnit ud af den
dim(a_comb1)
a_comb1[1,2]
#Tag udsnit ud af den
dim(a_comb1)
a_comb1[1,2]
a_comb1[1,2]
a_comb1[1,12]
a_comb1[1,13]
a_comb1[2,13]
a_comb1[1,16]
a_comb1[2,1:70]
a_comb1[1.2]
a_comb1[1.4]
a_comb1[2.1:70]
# Data frame
a_comb1 <- as.data.frame(combn(a[1:5,1:ncol(a)], 5))
View(a_comb1)
# Data frame
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 5))
# Data frame
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
#Tag udsnit ud af den
length(a_comb1)
# Data frame
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 1))
# Data frame
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 5))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 4))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 1))
View(a_comb1)
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 3))
View(a_comb1)
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder)
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:2,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[2:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[2:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:5,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1,60:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1,12:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:1,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[2:1,1:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:1,3:ncol(a)], 2))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:1,3:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1,2:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1,1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[2,1:ncol(a)], 3))
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
a_comb1 <- data.frame(combn(a[1:ncol(a)], 3))
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) -1))
for (i in 1:length(a_comb1[[1]])) {
View(a_comb1)
View(FTI)
View(FTI)
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) -1))
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) -1))
#Loop
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI)-1), ncol(FTI)-1)
for (j in 1:(ncol(FTI)-1)) {
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) -1))
for (j in 1:(ncol(FTI)-1)) {
#Loop
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) -1))
for (j in 1:(ncol(FTI)-1)) {
for (i in 1:length(a_comb1[[1]])) {
a_comb1[[j]][[i]] <- colMeans(combn(FTI[i,2:ncol(FTI)], j))
}
a_comb1[[j]][[i]] <- colMeans(combn(FTI[i,2:ncol(FTI)], j))
#Loop
a_comb1 <- rep(list(rep(list(rep(list())), nrow(a_comb1), ncol(a_comb1) -1))
for (j in 1:(ncol(a_comb1)-1)) {
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) - 1), ncol(FTI) - 1)
for (j in 1:(ncol(FTI) - 1)) {
#
a_comb1 <- rep(list(rep(list(rep(list())), nrow(FTI), ncol(FTI) - 1), ncol(FTI) - 1)
for (j in 1:(ncol(FTI) - 1)) {
#
a_comb1 <- rep(list(rep(list(rep(list()), ncol(FTI) - 1), nrow(FTI)), ncol(FTI) - 1)
for (j in 1:(ncol(FTI) - 1)) {
#Loop
a_comb1 <- rep(list(rep(list(rep(list())), nrow(a_comb1), ncol(a_comb1)))
for (j in 1:(ncol(a_comb1))) {
for (j in 1:(ncol(a_comb1))) {
for (i in 1:length(a_comb1[[1]])) {
a_comb1[[j]][[i]] <- colMeans(combn(a_comb1[i,2:ncol(a_comb1)], j))
}
}
#Loop
a_comb2 <- a_comb1
View(a_comb2)
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb1), ncol(a_comb1)))
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb2), ncol(a_comb2)))
a_comb2 <- rep(list(rep(list(rep(list()), nrow(a_comb1), ncol(a_comb1))), ncol(a_comb1))
for (j in 1:(ncol(a_comb2))) {
a_comb2 <- rep(list(rep(list(rep(list()), nrow(a_comb2), ncol(a_comb2))
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb2))), ncol(a_comb2)-1))
#Loop
a_comb2 <- a_comb1
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb2))), ncol(a_comb2)-1))
a_comb2 <- rep(list(rep(list(rep(list(), nrow(a_comb2))), ncol(a_comb2)-1), ncol(a_comb2)-1)
a_comb2 <- rep(list(rep(list(rep(list(), nrow(a_comb2))), ncol(a_comb2)-1), ncol(a_comb2)-1)
for (i in 1:length(a_comb2[[1]])) {
numeric_data <- as.numeric(a_comb2[i,2:ncol(a_comb2)])
a_comb2[[j]][[i]] <- colMeans(combn(a_comb2[i,2:ncol(a_comb2)], j))
}
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb2))), ncol(a_comb2)-1))
a_comb2 <- rep(list(rep(list(rep(list)), nrow(a_comb2))), ncol(a_comb2)-1))
a_comb1 <- combn(a[1:1,1:ncol(a)], 1)
a_comb1 <- combn(a[1,1:ncol(a)], 3)
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
#
a_comb1 <- data.frame(combn(a[1:ncol(a)], 3))
a_comb1 <- combn(a[1,1:ncol(a)], 3)
a_comb1 <- combn(a[2:5,1:ncol(a)], 1)
# Data frame (Prøv at skifte sidste tal for at ændre tidsperioder) Meningen er at få tidsperioder for forskellige tidsperioder
#
a_comb1 <- data.frame(combn(a[2:5,1ncol(a)], 3))
a_comb2 <- rep(list(rep(list(rep(list())), nrow(a_comb2), ncol(a_comb2)))
for (j in 1:(ncol(a_comb2))) {
View(FTI)
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
for (j in 1:(ncol(a_comb2))) {
#
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
#
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(), ncol(a_comb2)), nrow(a_comb2)), ncol(a_comb2))
View(a_comb2)
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
for (i in 1:nrow(a_comb2)) {
# Calculate column means for different combinations of columns
a_comb2[[j]][[i]] <- colMeans(combn(a_comb2[i,], j))
}
}
#
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(), ncol(a_comb2)), nrow(a_comb2)), ncol(a_comb2))
#
# Initialize a_comb2 as a list of lists
# Create an empty list with the desired structure
a_comb2 <- vector("list", nrow(a_comb2))
#
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(), ncol(a_comb2)), nrow(a_comb2)), ncol(a_comb2))
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(), ncol(a_comb2)), nrow(a_comb2)), ncol(a_comb2))
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
tillid_test <- forvkvar[1,2:5]
#
tillid_test <- forvkvar[1,2:5]
View(tillid_test)
combn(tillid_test[1,1:ncol(tillid_test)], 3)
# Select the relevant columns
questions_data <- FTI[, ]
View(questions_data)
# Create all combinations using combn
all_combinations <- combn(questions_data, 1:18, simplify = FALSE)
# CHAT Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
# Create all combinations using combn
all_combinations <- combn(questions_data, 1:18, simplify = FALSE)
#
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c))),(ncol(c)-1))
for(i in 1:length(a_comb2[[1]]))
for(i in 1:length(a_comb2[[1]]))
{
a_comb2[[j]][[i]] <- colMeans(combn(c[i,2:ncol(c)], j))
}
View(a_comb1)
View(a_comb2)
# CHAT Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
# CHAT Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
# CHAT Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
# CHAT Initialize a_comb2 as a list of lists
a_comb2 <- rep(list(rep(list(rep(list(), ncol(a_comb2))), nrow(a_comb2)), ncol(a_comb2))
# Loop through the combinations
for (j in 1:(ncol(a_comb2))) {
# Create all combinations using combn
all_combinations <- combn(questions_data, 1:18, simplify = FALSE)
# Create an empty list to store combinations
all_combinations <- list()
# Create an empty list to store combinations
all_combinations <- list()
# Generate combinations for each length from 1 to 18
for (k in 1:18) {
combinations_k <- combn(questions_data, k, simplify = FALSE)
all_combinations[[as.character(k)]] <- combinations_k
}
View(all_combinations)
View(combinations_k)
View(all_combinations)
length(all_combinations)
dim(all_combinations)
View(all_combinations)
View(all_combinations)
View(all_combinations)
View(forvkvar)
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c))),(ncol(c)-1))
#
# Initialize a_comb2 as a list of lists
num_rows <- nrow(c)
num_cols <- ncol(c)
a_comb2 <- vector("list", length = num_cols - 1)
a_comb2 <- vector("list", length = num_cols - 1)
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
num_cols <- ncol(c)
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
num_cols <- ncol(c)
a_comb2 <- vector("list", length = num_cols - 1)
#
# Initialize a_comb2 as a list of lists
# Initialize a_comb2 as a list of lists
# Get the number of columns in the data frame c
num_cols <- ncol(c)
# Initialize a_comb2 as a list of lists
a_comb2 <- vector("list", length = num_cols - 1)
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c))),(ncol(c)-1))
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for(j in 1:(ncol(c)-1))
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (j in 1:(ncol(c) - 1)) {
for (j in 1:(ncol(c) - 1)) {
for (i in 1:nrow(c)) {
a_comb2[[j]][[i]] <- colMeans(combn(c[i, ], j))
}
}
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
for (j in 1:(ncol(c) - 1)) {
for (i in 1:nrow(c)) {
a_comb2[[j]][[i]] <- colMeans(combn(c[i, ], j))
}
}
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
# Initialize a_comb2 as a list of lists
a_comb2 <- vector("list", length = ncol(c) - 1)
#
forvkvartest2 <- matrix(as.numeric(forvkvar)[1,2:5]), ncol = 4
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
# Loop
a_comb2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
for (i in 1:nrow(c)) {
#
forvkvartest2 <- matrix(as.numeric(forvkvar)[1,2:5]), ncol = 4)
#
forvkvartest2 <- matrix(as.numeric(forvkvar[1,2:5]), ncol = 4)
View(forvkvartest2)
colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],4))
# Loop
forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
View(forvkvartest2)
View(forvkvartest2)
View(a_comb2)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
forvkvartest2 <- lapply(1:ncol(c), function(i) lapply(1:nrow(c), function(j) list()))
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
forvkvartest2 <- lapply(1:ncol(c), function(i) lapply(1:nrow(c), function(j) list()))
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12)
View(comb)
for (j in 1:12) {
for (i in 1:length(comb[[1]])) {
comb[[j]][[i]] <- colMeans(combn(as.numeric(FORV1_DATA[i, 4:15]), j))
}
}
for (j in 1:12) {
for (i in 1:length(comb[[1]])) {
comb[[j]][[i]] <- colMeans(combn(as.numeric(forvkvartest2[i, 4:15]), j))
}
}
View(comb)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12)
for (j in 1:12) {
for (i in 1:length(comb[[1]])) {
comb[[j]][[i]] <- colMeans(combn(as.numeric(forvkvartest2[i, 4:15]), j))
}
}
View(comb)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12) {
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12) {
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
for(i in 1:(ncol(forvkvartest2))){
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
}
View(forvkvartest3)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12) {
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12)
View(forvkvartest3)
View(forvkvartest2)
# Samme som ovenstående men ændring af kolonne
forvkvartest2 <- matrix(as.numeric(forvkvar[1,3:5]), ncol = 4)
# Samme som ovenstående men ændring af kolonne
forvkvartest2 <- matrix(as.numeric(forvkvar[1,3:5]), ncol = 6)
colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],4))
colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],6))
for(i in 1:(ncol(forvkvartest2))){
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
}
#
forvkvartest2 <- matrix(as.numeric(forvkvar[1,2:5]), ncol = 4)
colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],4))
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12){
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
#
combn(forvkvartest2[1,1:ncol(forvkvartest2)], 3)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12){
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12)
for(i in 1:(ncol(forvkvartest2))){
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
}
forvkvartest3 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
View(forvkvartest3)
# Loop
#forvkvartest2 <- rep(list(rep(list(rep(list())), nrow(c)), ncol(c) - 1)
comb <- rep(list(rep(list(rep(list())),nrow(forvkvartest2))),12)
for(i in 1:(ncol(forvkvartest2))){
forvkvartest4 <- list(colMeans(combn(forvkvartest2[,1:ncol(forvkvartest2)],i)))
}
View(forvkvartest4)
# Samme som ovenstående men ændring af kolonne
forvkvartest2 <- matrix(as.numeric(forvkvar[1:2]), ncol = 2)
# Samme som ovenstående men ændring af kolonne
forvkvartest2 <- matrix(as.numeric(forvkvar[1:2]), ncol = 4)
# Samme som ovenstående men ændring af kolonne
forvkvartest2 <- matrix(as.numeric(forvkvar[1:2]), ncol = 4)
